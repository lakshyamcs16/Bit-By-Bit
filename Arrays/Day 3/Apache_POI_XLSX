package com.ivp.excel;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Iterator;
import java.util.Locale;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.model.StylesTable;
import org.apache.poi.xssf.usermodel.IndexedColorMap;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class ApachePOIExcelWrite {

    private static String FILE_NAME = "/home/lakshya/Downloads/poi-bin-4.1.0-20190412/poi-4.1.0/";
    private static int rowNum = 0;
    public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException {

        XSSFWorkbook workbook = new XSSFWorkbook();

        StringBuilder contentBuilder = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new FileReader("/home/lakshya/Desktop/single.html"));
            String str;
            while ((str = in.readLine()) != null) {
                contentBuilder.append(str);
            }
            in.close();
        } catch (IOException e) {
        }
        String content = contentBuilder.toString();
        content = content.substring(content.indexOf("<body>") + 6, content.indexOf("</body>"));
        System.out.println("Parsing data");     
//      System.out.println("Creating headers");
//      fillHeaderData(HEADER, sheet, workbook);
//      System.out.println("Adding data");
//      fillCellData(DATA, sheet, workbook, false);
        System.out.println("Creating Excel Sheet");
		winnerAndLosers(content, workbook);
//        multisheets(content, workbook);
        System.out.println("Resizing columns");
        autoSizeColumns(workbook);  
        try {
            FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
            workbook.write(outputStream);
            workbook.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("Done!");
    }
    
    public static void autoSizeColumns(Workbook workbook) {
        int numberOfSheets = workbook.getNumberOfSheets();
        for (int i = 0; i < numberOfSheets; i++) {
            Sheet sheet = workbook.getSheetAt(i);
            if (sheet.getPhysicalNumberOfRows() > 0) {
                Row row = sheet.getRow(sheet.getFirstRowNum());
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    int columnIndex = cell.getColumnIndex();
                    sheet.autoSizeColumn(columnIndex);
                }
            }
        }
    }
    
	public static void fillCellData(String data, XSSFSheet sheet, XSSFWorkbook workbook, boolean isEmptyRowIncluded) {
        JsonArray jsonArray = ApachePOIExcelWrite.getJsonArray(data);
                
        CellStyle style = workbook.createCellStyle();  
        Font font = workbook.createFont();
        font.setColor(HSSFColor.HSSFColorPredefined.GREEN.getIndex()); 
        style.setDataFormat(HSSFDataFormat.getBuiltinFormat("#,##0.00"));
        style.setFont(font);  
        
        CellStyle negstyle = workbook.createCellStyle();  
        Font negfont = workbook.createFont();
        negfont.setColor(HSSFColor.HSSFColorPredefined.RED.getIndex()); 
        negstyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("#,##0.00"));
        negstyle.setFont(negfont);
        
        for (int i = 0; i < jsonArray.size(); i++) {
            JsonArray obj = (JsonArray) jsonArray.get(i);
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;

            for (int j = 0; j < obj.size(); j++) {
            	JsonObject  jObj = obj.get(j).getAsJsonObject();            
                String sId = jObj.get("sID").getAsString();
                String dataType = jObj.get("dataType").getAsString();
                
                Cell cell = row.createCell(colNum++);
        		
                String stringField = StringEscapeUtils.unescapeHtml(jObj.get("data").getAsString());
        		
        		if(dataType.equalsIgnoreCase("Number")) {
        			NumberFormat format = NumberFormat.getInstance(Locale.US);
        			double dVal = 0;
					try {
						dVal = format.parse(stringField).doubleValue();
					} catch (ParseException e) {
						e.printStackTrace();
					}
        			cell.setCellValue(dVal);
        			if(sId.toLowerCase().contains("numberpositive") || sId.toLowerCase().contains("lastrowp")) { 
	                	cell.setCellStyle(style);
        			}else if(sId.toLowerCase().contains("numbernegative") || sId.toLowerCase().contains("lastrown")) {
        				cell.setCellStyle(negstyle);                   		
	                }
        		}else {
            		cell.setCellValue(stringField);
        		}
                                
            }             
        } 
        
        if(isEmptyRowIncluded) rowNum++;
    }
    
    public static void fillHeaderData(String data, XSSFSheet sheet, XSSFWorkbook workbook) {
        JsonArray obj = ApachePOIExcelWrite.getJsonArray(data);

        
        StylesTable stable = workbook.getStylesSource();
        XSSFCellStyle style = stable.createCellStyle();
        
        IndexedColorMap colorMap = workbook.getStylesSource().getIndexedColors();
        XSSFColor myColor = new XSSFColor(new java.awt.Color(24, 67, 102), colorMap);
        style.setFillForegroundColor(myColor);
        
        Font font = workbook.createFont();
        font.setColor(IndexedColors.WHITE.getIndex());
        style.setFont(font);
        
        Row row = sheet.createRow(rowNum++);
        int colNum = 0;

        for (int j = 0; j < obj.size(); j++) {
        	JsonObject  jObj = obj.get(j).getAsJsonObject();            
            
            Cell cell = row.createCell(colNum++);
            
            style.setFillForegroundColor(myColor);
            style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            
            String stringField = StringEscapeUtils.unescapeHtml(jObj.get("data").getAsString());
    		cell.setCellValue(stringField);     
    		cell.setCellStyle(style);
        }
                 
    }
    
    public static void winnerAndLosers(String data, XSSFWorkbook workbook) {
    	
    	JsonObject jObj = ApachePOIExcelWrite.getJsonObject(data);
    	String sheetName = StringEscapeUtils.unescapeHtml(jObj.get("sheetName").getAsString());
    	
        JsonArray dataArray = jObj.get("data").getAsJsonArray();
        JsonArray headerArray = jObj.get("headers").getAsJsonArray();
        
        XSSFSheet sheet = workbook.createSheet(sheetName);
        for (int i = 0; i < dataArray.size(); i++) {
            JsonArray dataObj = (JsonArray) dataArray.get(i);
            JsonArray headerObj = (JsonArray) headerArray.get(i);
            if(jObj.has("titles")) {
                 JsonArray titles = jObj.get("titles").getAsJsonArray();
            	 Row row = sheet.createRow(rowNum);
            	 Cell cell = row.createCell(0);
            	 
            	 cell.setCellValue(StringEscapeUtils.unescapeHtml(titles.get(i).getAsString()));
            	 
            	 	StylesTable stable = workbook.getStylesSource();
            	 	XSSFCellStyle style = stable.createCellStyle();
            	 	
            	 	XSSFFont defaultFont= workbook.createFont();
            	    defaultFont.setBold(true);
            	    
            	    style.setFont(defaultFont);
            	    style.setAlignment(HorizontalAlignment.CENTER);
            	    
            	 cell.setCellStyle(style);
            	 sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,headerObj.size()-1));
            	 rowNum++;
            }
            fillHeaderData(headerObj.toString(), sheet, workbook);
            fillCellData(dataObj.toString(), sheet, workbook, true);              
        }
        
        if(!jObj.has("titles")) {
        	sheet.createFreezePane(0, 1);
        }
        FILE_NAME += sheetName + ".xlsx";
    }
    
    public static void multisheets(String data, XSSFWorkbook workbook) {
    	
    	JsonObject jObj = ApachePOIExcelWrite.getJsonObject(data);
    	String sheetName = StringEscapeUtils.unescapeHtml(jObj.get("sheetName").getAsString());
    	
        JsonArray dataArray = jObj.get("data").getAsJsonArray();
        JsonArray headerArray = jObj.get("headers").getAsJsonArray();

        for (int i = 0; i < headerArray.size(); i++) {    
            	JsonArray array = (JsonArray) dataArray.get(i);
            	XSSFSheet sheet = workbook.createSheet(String.valueOf(i));
            	fillHeaderData(headerArray.get(i).toString(), sheet, workbook);            	
            	fillCellData(array.toString(), sheet, workbook, true);  
                sheet.createFreezePane(0, 1);
            	rowNum = 0;
        }
        
        FILE_NAME += sheetName + "_MULTI.xlsx";
    }

	public static JsonArray getJsonArray(String data) {
    	JsonParser jsonParser = new JsonParser();
        JsonArray jsonArray = (JsonArray) jsonParser.parse(data);
        return jsonArray;
    }
	
	public static JsonObject getJsonObject(String obj) {
    	JsonParser jsonParser = new JsonParser();
    	JsonObject jsonObj = (JsonObject) jsonParser.parse(obj);
        return jsonObj;
    }
}
